{"version":3,"sources":["logo.svg","triviaList.js","App.js","reportWebVitals.js","index.js"],"names":["createData","name","calories","fat","carbs","protein","useStyles","makeStyles","root","minWidth","backgroundColor","borderRadius","titlePage","padding","textAlign","color","bullet","display","margin","transform","input","width","outline","border","label","fontSize","title","pos","marginBottom","answer","paddingTop","searchTermLength","table","tableHead","tableBody","TriviaList","useState","maxNum","setMaxNum","TriviaListJson","triviaObj","searchTerm","setSearchTerm","setSearchTermLength","questions","setQuestions","filteredQuestions","setFilteredQuestions","classes","useEffect","results","filter","man","Question","toLowerCase","includes","length","slice","Container","className","noValidate","autoComplete","InputLabel","htmlFor","Select","labelId","id","value","onChange","event","target","MenuItem","Input","e","startAdornment","InputAdornment","position","onClick","TableContainer","Table","size","TableHead","TableRow","style","borderBottom","TableCell","align","TableBody","map","row","component","scope","Answer","height","backgroundImage","Id","backgroundSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c364666.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\n\r\nimport TriviaListJson from \"./answers.json\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n// table\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n// table\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// columnsStart\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n];\r\n\r\n// columnsEnd\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: \"#212541\",\r\n    borderRadius: \"15px\",\r\n  },\r\n  titlePage: {\r\n    padding: \"15px\",\r\n    textAlign: \"center\",\r\n    color: \"#b4bae9\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"rgba(255,255,255,0.1)\",\r\n    color: \"#a6acdc\",\r\n    margin: \"20px 0px 0px 0px\",\r\n    padding: \"15px\",\r\n    width: \"100%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n  },\r\n  label: {\r\n    fontSize: 14,\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    color: \"#b4bae9\",\r\n  },\r\n  pos: {\r\n    marginBottom: 15,\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    color: \"#12eeb1\",\r\n    paddingTop: \"10px\",\r\n  },\r\n  searchTermLength: {\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n  table: {\r\n    backgroundColor: \"rgba(255,255,255,0.1)\",\r\n    borderRadius: '7px'\r\n  },\r\n  tableHead: {\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px 0px 10px 0px\",\r\n  },\r\n  tableBody: {\r\n    color: \"#e2e4f5\",\r\n  },\r\n});\r\n\r\nfunction TriviaList() {\r\n  // const triviaObj = TriviaListJson\r\n  const imgNums = [\r\n    100, 102, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1277, 1278,\r\n    1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,\r\n    1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1309, 1310,\r\n    1311, 1312, 1313, 1314, 1315, 1316, 1328, 1329, 1330, 1332, 1333, 143, 163,\r\n    176, 177, 187, 189, 212, 217, 35, 351, 796, 814, 815, 816, 817, 818, 819,\r\n    820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835,\r\n    836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850,\r\n    851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865,\r\n    866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880,\r\n    881, 882, 883, 884, 885, 886, 97, 98,\r\n  ];\r\n  const [maxNum, setMaxNum] = useState(10);\r\n  const [triviaObj, setTriviaObj] = useState(TriviaListJson[\"QuestionList\"]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchTermLength, setSearchTermLength] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const results = triviaObj.filter((man) =>\r\n      man.Question.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setSearchTermLength(results.length);\r\n    setQuestions(results);\r\n    setFilteredQuestions(results.slice(0, maxNum));\r\n  }, [searchTerm]);\r\n\r\n  const clearSearch = () => {\r\n    setSearchTerm(\"\");\r\n  };\r\n\r\n  const maxNumSelect = (event) => {\r\n    setMaxNum(event.target.value);\r\n    setFilteredQuestions(questions.slice(0, event.target.value));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className={classes.titlePage}>WWE TRIVIA RUMBLE</h1>\r\n      <form noValidate autoComplete=\"off\">\r\n        <InputLabel\r\n          className={classes.label}\r\n          htmlFor=\"input-with-icon-adornment\"\r\n        >\r\n          Type Question Here\r\n        </InputLabel>\r\n        {/* <button onClick={changeMaxNum20}>20</button> */}\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={maxNum}\r\n          onChange={maxNumSelect}\r\n        >\r\n          <MenuItem value={10}>Ten</MenuItem>\r\n          <MenuItem value={20}>Twenty</MenuItem>\r\n          <MenuItem value={30}>Thirty</MenuItem>\r\n        </Select>\r\n        {/* <button onClick={changeMaxNum30}>30</button> */}\r\n        <Input\r\n          className={classes.input}\r\n          id=\"standard-basic\"\r\n          label=\"Type Question Here\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              <ClearIcon onClick={clearSearch} />\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </form>\r\n      {searchTermLength.length > 20 ? (\r\n        <p className={classes.searchTermLength}>\r\n          This search contain {searchTermLength} registers, please specify more\r\n        </p>\r\n      ) : (\r\n        <p className={classes.searchTermLength}>\r\n          {searchTermLength} registers found\r\n        </p>\r\n      )}\r\n      <div className=\"pokemon-list\">\r\n        <TableContainer >\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"a dense table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow  style={{ borderBottom: '3px #e2e4f5 solid' }}>\r\n                <TableCell><h3 className={classes.tableHead}>Question</h3> </TableCell>\r\n                <TableCell align=\"left\"><h3 className={classes.tableHead}>Answer</h3></TableCell>\r\n                <TableCell align=\"left\"><h3 className={classes.tableHead}>Image</h3></TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredQuestions.map((row) => (\r\n                <TableRow key={row.Id}  style={{ borderBottom: '3px #e2e4f5 solid' }}>\r\n                  <TableCell style={{ border: 0 }} component=\"th\" scope=\"row\">\r\n                    <p className={classes.tableBody}>{row.Question}</p>                    \r\n                  </TableCell>\r\n                  <TableCell style={{ border: 0 }} align=\"left\">            \r\n                    <p style={{ fontSize: '18px' }} className={classes.tableBody}>{row.Answer}</p>\r\n                  </TableCell>\r\n                  <TableCell style={{ border: 0 }} align=\"left\">\r\n                    <div\r\n                      key={\"img-\" + row.Id}\r\n                      style={{\r\n                        height: \"30px\",\r\n                        width: \"30px\",\r\n                        backgroundImage: `url(./img/${row.Id}.png)`,\r\n                        backgroundSize: 'cover'\r\n                      }}\r\n                    ></div>\r\n                  </TableCell>\r\n                  {/* <TableCell align=\"right\">{row.fat}</TableCell>\r\n                  <TableCell align=\"right\">{row.carbs}</TableCell>\r\n                  <TableCell align=\"right\">{row.protein}</TableCell> */}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {/* <Grid container spacing={3}>\r\n          {filteredQuestions.map((questionn) => (\r\n            <Grid\r\n              key={\"grid-\" + questionn.Id}\r\n              item\r\n              xs={12}\r\n              sm={12}\r\n              md={12}\r\n              lg={12}\r\n            >\r\n              <Card\r\n                key={\"card-\" + questionn.Id}\r\n                className={classes.root}\r\n                variant=\"outlined\"\r\n              >\r\n                <CardContent key={\"card-content-\" + questionn.Id}>\r\n                  <Typography\r\n                    key={\"title-\" + questionn.Id}\r\n                    className={classes.title}\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    Q: {questionn.Question}\r\n                  </Typography>\r\n                  <div\r\n                    key={\"img-\" + questionn.Id}\r\n                    style={{\r\n                      height: imgNums.find((idd) => idd == questionn.Id)\r\n                        ? \"100px\"\r\n                        : \"0\",\r\n                      width: \"100px\",\r\n                      backgroundImage: `url(./img/${questionn.Id}.png)`,\r\n                    }}\r\n                  ></div>\r\n\r\n                  <Typography\r\n                    key={\"answer-\" + questionn.Id}\r\n                    variant=\"body2\"\r\n                    className={classes.answer}\r\n                    component=\"p\"\r\n                  >\r\n                    A: {questionn.Answer}\r\n                  </Typography>\r\n                </CardContent>\r\n                \r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid> */}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TriviaList;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TriviaList from './triviaList'\n\nfunction App() {\n  const sayHello = () => {\n    console.log('Gello')\n  }\n  return (\n    <div>\n      <TriviaList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}