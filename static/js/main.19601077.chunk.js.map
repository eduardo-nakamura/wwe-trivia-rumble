{"version":3,"sources":["logo.svg","img/logo.png","triviaList.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","borderRadius","titlePage","padding","textAlign","color","bullet","display","margin","transform","input","width","outline","border","label","fontSize","title","pos","marginBottom","answer","paddingTop","searchTermLength","TriviaList","imgNums","useState","TriviaListJson","triviaObj","searchTerm","setSearchTerm","setSearchTermLength","filteredQuestions","setFilteredQuestions","classes","useEffect","results","filter","man","Question","toLowerCase","includes","length","slice","Container","className","noValidate","autoComplete","InputLabel","htmlFor","Input","id","value","onChange","e","target","startAdornment","InputAdornment","position","onClick","Grid","container","spacing","map","questionn","item","xs","sm","md","lg","Card","variant","CardContent","Typography","gutterBottom","style","height","find","idd","Id","backgroundImage","component","Answer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19601077.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/logo.3d56e832.png\";","import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport TriviaListJson from \"./answers.json\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TitleImg from \"./img/logo.png\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: \"#212541\",\r\n    borderRadius: \"15px\",\r\n  },\r\n  titlePage: {\r\n    padding: \"15px\",\r\n    textAlign: \"center\",\r\n    color: \"#b4bae9\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"rgba(255,255,255,0.3)\",\r\n    color: \"#a6acdc\",\r\n    margin: \"20px 0px 0px 0px\",\r\n    padding: \"15px\",\r\n    width: \"100%\",\r\n    borderRadius: \"10px\",\r\n    outline: \"none\",\r\n    border: 0,\r\n  },\r\n  label: {\r\n    fontSize: 14,\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n    color: \"#b4bae9\",\r\n  },\r\n  pos: {\r\n    marginBottom: 15,\r\n  },\r\n  answer: {\r\n    fontSize: 18,\r\n    color: \"#12eeb1\",\r\n    paddingTop: \"10px\",\r\n  },\r\n  searchTermLength: {\r\n    color: \"#e2e4f5\",\r\n    padding: \"10px\",\r\n  },\r\n});\r\n\r\nfunction TriviaList() {\r\n  // const triviaObj = TriviaListJson\r\n  const imgNums = [\r\n    100, 102, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1277, 1278,\r\n    1279, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,\r\n    1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1309, 1310,\r\n    1311, 1312, 1313, 1314, 1315, 1316, 1328, 1329, 1330, 1332, 1333, 143, 163,\r\n    176, 177, 187, 189, 212, 217, 35, 351, 796, 814, 815, 816, 817, 818, 819,\r\n    820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835,\r\n    836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850,\r\n    851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865,\r\n    866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880,\r\n    881, 882, 883, 884, 885, 886, 97, 98,\r\n  ];\r\n  const [triviaObj, setTriviaObj] = useState(TriviaListJson[\"QuestionList\"]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchTermLength, setSearchTermLength] = useState(0);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n  const classes = useStyles();\r\n  // useEffect(() => {\r\n  //   if (searchTerm.length > 0) {\r\n  //     const results = triviaObj.filter((man) =>\r\n  //       man.Question.toLowerCase().includes(searchTerm.toLowerCase())\r\n  //     );\r\n  //     let debouncer = setTimeout(() => {\r\n  //       setSearchTermLength(results.length);\r\n  //       setFilteredQuestions(results.slice(0, 20));\r\n  //     }, 2000);\r\n  //   }\r\n  // }, [searchTerm]);\r\n  useEffect(() => {\r\n    // let debouncer = setTimeout(() => {\r\n    //   const results = triviaObj.filter((man) =>\r\n    //     man.Question.toLowerCase().includes(searchTerm.toLowerCase())\r\n    //   );\r\n    //   setSearchTermLength(results.length);\r\n    //   setFilteredQuestions(results.slice(0, 20));\r\n    // }, 500);\r\n    const results = triviaObj.filter((man) =>\r\n      man.Question.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setSearchTermLength(results.length);\r\n    setFilteredQuestions(results.slice(0, 20));\r\n  }, [searchTerm]);\r\n  const clearSearch = () => {\r\n    setSearchTerm('');\r\n  }\r\n  const handleChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n  const nextPokemons = (id) => {\r\n    return `./img/${id}.png`;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className={classes.titlePage}>\r\n        {/* <img src={TitleImg} alt=\"WWE CHAMPIONS\" /> */}\r\n        WWE TRIVIA RUMBLE\r\n      </h1>\r\n      <form noValidate autoComplete=\"off\">\r\n        {/* <label className={classes.label}>Type Question Here</label>\r\n        <input\r\n          className={classes.input}\r\n          id=\"standard-basic\"\r\n          label=\"Type Question Here\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n        />\r\n        <Button variant=\"outlined\">X</Button> */}\r\n        <InputLabel className={classes.label} htmlFor=\"input-with-icon-adornment\">\r\n          Type Question Here\r\n        </InputLabel>\r\n        <Input\r\n          className={classes.input}\r\n          id=\"standard-basic\"\r\n          label=\"Type Question Here\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\" >\r\n              <ClearIcon onClick={clearSearch}/>\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </form>\r\n      {searchTermLength.length > 20 ? (\r\n        <p className={classes.searchTermLength}>\r\n          This search contain {searchTermLength} registers, please specify more\r\n        </p>\r\n      ) : (\r\n        <p className={classes.searchTermLength}>\r\n          {searchTermLength} registers found\r\n        </p>\r\n      )}\r\n      <div className=\"pokemon-list\">\r\n        <Grid container spacing={3}>\r\n          {filteredQuestions.map((questionn) => (\r\n            <Grid item xs={12} sm={6} md={4} lg={3}>\r\n              {/* <h4>{questionn.Question}</h4>\r\n              <div\r\n                style={{\r\n                  height: \"100px\",\r\n                  width: \"100px\",\r\n                  backgroundImage: `url(./img/${questionn.Id}.png)`,\r\n                }}\r\n              ></div>\r\n              <p>{questionn.Answer}</p> */}\r\n\r\n              <Card className={classes.root} variant=\"outlined\">\r\n                <CardContent>\r\n                  <Typography\r\n                    className={classes.title}\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                  >\r\n                    Q: {questionn.Question}\r\n                  </Typography>\r\n                  <div\r\n                    style={{\r\n                      height: imgNums.find((idd) => idd == questionn.Id)\r\n                        ? \"100px\"\r\n                        : \"0\",\r\n                      width: \"100px\",\r\n                      backgroundImage: `url(./img/${questionn.Id}.png)`,\r\n                    }}\r\n                  ></div>\r\n\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    className={classes.answer}\r\n                    component=\"p\"\r\n                  >\r\n                    A: {questionn.Answer}\r\n                  </Typography>\r\n                </CardContent>\r\n                {/* <CardActions>\r\n                  <Button size=\"small\">Learn More</Button>\r\n                </CardActions> */}\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TriviaList;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TriviaList from './triviaList'\n\nfunction App() {\n  const sayHello = () => {\n    console.log('Gello')\n  }\n  return (\n    <div>\n      <TriviaList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}